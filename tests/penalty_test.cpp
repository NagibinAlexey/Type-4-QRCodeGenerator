#include <gtest/gtest.h>
#include "penalty_calculation.cpp"

class PenaltyTestSuite : public ::testing::Test {
protected:
    std::vector<std::vector<QR::Module>> matrix = {
                                                   {{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{1,1},{0,0},{0,0},{1,1},{1,1},{1,1},{1,1},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
                                                   {{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{0,0},{1,1},{1,1},{0,0},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0}},
                                                   {{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{1,1},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0}},
                                                   {{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0}},
                                                   {{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{1,1},{1,1},{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0}},
                                                   {{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0}},
                                                   {{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{0,0},{1,1},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},
                                                   {{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1}},
                                                   {{1,1},{0,0},{0,0},{1,1},{0,0},{1,1},{0,0},{0,0},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{0,0},{1,1},{0,0},{0,0},{0,0},{0,0},{0,0}},
                                                   {{1,1},{0,0},{1,1},{1,1},{1,1},{1,1},{1,1},{1,1},{0,0},{0,0},{0,0},{0,0},{1,1},{1,1},{1,1},{1,1},{0,0},{1,1},{1,1},{1,1},{0,0}},
                                                   {{1,1},{1,1},{0,0},{0,0},{1,1},{0,0},{0,0},{0,0},{1,1},{0,0},{0,0},{1,1},{1,1},{1,1},{0,0},{1,1},{0,0},{0,0},{1,1},{1,1},{1,1}}
                                                   };
};

TEST_F(PenaltyTestSuite, horizontalPenalty1) {
    EXPECT_EQ(QR::utility::horizontalPenalty1(matrix), 58);
}

TEST_F(PenaltyTestSuite, verticalPenalty1) {
    EXPECT_EQ(QR::utility::verticalPenalty1(matrix), 60);
}

TEST_F(PenaltyTestSuite, calculatePenalty2) {
    EXPECT_EQ(QR::utility::calculatePenalty2(matrix), 60);
}

TEST_F(PenaltyTestSuite, calculatePenalty3) {
    EXPECT_EQ(QR::utility::calculatePenalty3(matrix), 40);
}

TEST_F(PenaltyTestSuite, calculatePenalty4) {
    EXPECT_EQ(QR::utility::calculatePenalty4(matrix), 0);
}
